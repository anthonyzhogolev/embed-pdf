{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","link","useState","setLink","useEffect","console","log","a","fetch","encodeURI","response","arrayBuffer","buffer","length","myBlob","Blob","type","objectUrl","URL","createObjectURL","fetchData","revokeObjectURL","usePdf","data","style","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAsDeA,MAjBf,WACE,IAAMC,EAjCR,WACE,MAAwBC,mBAAS,IAAjC,mBAAOD,EAAP,KAAaE,EAAb,KA4BA,OA3BAC,qBAAU,WAsBR,OArBAC,QAAQC,IAAI,gBAEG,uCAAG,kCAAAC,EAAA,sEACOC,MACrBC,UACE,iEAEF,IALc,cACVC,EADU,gBAUKA,EAASC,cAVd,OAUVC,EAVU,OAWhBP,QAAQC,IAAI,gBAAiBM,EAAOC,QAC9BC,EAAS,IAAIC,KAAK,CAACH,GAAS,CAAEI,KAAM,oBACpCC,EAAYC,IAAIC,gBAAgBL,GACtCX,EAAQc,GAdQ,4CAAH,oDAiBfG,GAEO,WACLF,IAAIG,gBAAgBpB,GACpBE,EAAQ,OAET,IACIF,EAIMqB,GAMb,OACE,mCACE,wBAAQC,KAAMtB,EAAMuB,MANV,CACZC,MAAO,QACPC,OAAQ,SAI6BV,KAAK,kBAAxC,SACE,wDCnCOW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d2c56290.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { axios } from \"axios\";\n\nimport \"./App.css\";\n\nfunction usePdf() {\n  const [link, setLink] = useState(\"\");\n  useEffect(() => {\n    console.log(\"useEffect...\");\n\n    const fetchData = async () => {\n      const response = await fetch(\n        encodeURI(\n          \"https://vadimdez.github.io/ng2-pdf-viewer/assets/pdf-test.pdf\"\n        ),\n        {\n          // mode: \"no-cors\",\n        }\n      );\n\n      const buffer = await response.arrayBuffer();\n      console.log(\"buffer.length\", buffer.length);\n      const myBlob = new Blob([buffer], { type: \"application/pdf\" });\n      const objectUrl = URL.createObjectURL(myBlob);\n      setLink(objectUrl);\n    };\n\n    fetchData();\n\n    return () => {\n      URL.revokeObjectURL(link);\n      setLink(\"\");\n    };\n  }, []);\n  return link;\n}\n\nfunction App() {\n  const link = usePdf();\n\n  const style = {\n    width: \"200px\",\n    height: \"200px\",\n  };\n  return (\n    <>\n      <object data={link} style={style}  type=\"application/pdf\">\n        <span>NOT RENDERED...</span>\n      </object>\n      \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}