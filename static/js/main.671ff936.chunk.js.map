{"version":3,"sources":["onCountRounded.svg","App.js","reportWebVitals.js","index.js"],"names":["saveDocument","link","name","fileFormat","fileName","targetLink","document","createElement","download","href","click","remove","isSafari","isAppleVendor","navigator","vendor","indexOf","isCriOS","userAgent","isFxiOS","usePdf","useState","setLink","useEffect","console","log","a","fetch","encodeURI","response","arrayBuffer","buffer","length","myBlob","Blob","type","objectUrl","URL","createObjectURL","fetchData","revokeObjectURL","preview","options","window","open","App","onClick","style","cursor","src","icon","className","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2OAAe,G,MAAA,IAA0B,4C,eCMnCA,EAAe,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,KAA0C,IAApCC,YAAoC,MAA7B,GAA6B,MAAzBC,kBAAyB,MAAZ,MAAY,EAC5DC,EAAWF,EACXA,GAAQC,IACVC,EAAQ,UAAMF,EAAN,YAAcC,IAGxB,IAAME,EAAaC,SAASC,cAAc,KAC1CF,EAAWG,SAAWJ,EACtBC,EAAWI,KAAOR,EAClBI,EAAWK,QACXL,EAAWM,UAGPC,EAAW,WACf,IAAMC,EAAgBC,UAAUC,OAAOC,QAAQ,UAAY,EACrDC,GAAoD,IAA1CH,UAAUI,UAAUF,QAAQ,SACtCG,GAAoD,IAA1CL,UAAUI,UAAUF,QAAQ,SAC5C,OAAOH,GAAiBI,GAAWE,GAWrC,SAASC,IACP,MAAwBC,mBAAS,IAAjC,mBAAOpB,EAAP,KAAaqB,EAAb,KA6BA,OA5BAC,qBAAU,WAsBR,OArBAC,QAAQC,IAAI,gBAEG,uCAAG,kCAAAC,EAAA,sEACOC,MACrBC,UACE,iEAEF,IALc,cACVC,EADU,gBAUKA,EAASC,cAVd,OAUVC,EAVU,OAWhBP,QAAQC,IAAI,gBAAiBM,EAAOC,QAC9BC,EAAS,IAAIC,KAAK,CAACH,GAAS,CAAEI,KAAM,oBACpCC,EAAYC,IAAIC,gBAAgBL,GACtCX,EAAQc,GAdQ,4CAAH,oDAiBfG,GAEO,WACLF,IAAIG,gBAAgBvC,GACpBqB,EAAQ,OAET,IAEI,CACLrB,KAAMW,IAAa,KAAOX,EAC1BO,SAAU,WACRR,EAAa,CAAEC,OAAMC,KAAM,WAAYC,WAAY,SAErDsC,QAAS,WA3CQ,IAACC,IA4CH,CAAEzC,OAAMC,KAAM,WAAYC,WAAY,OA3CnDS,IACFZ,EAAa0C,GAEbC,OAAOC,KAAKF,EAAQzC,KAAM,YAuEf4C,MA1Bf,WACE,MAAoCzB,IAAtBZ,GAAd,EAAQP,KAAR,EAAcO,UAAUiC,EAAxB,EAAwBA,QAQxB,OACE,qCACE,qBAAKK,QAASL,EAASM,MAAO,CAAEC,OAAQ,WAAxC,SAOI,qBAAKC,IAAKC,EAAMC,UAAU,OAAOC,IAAI,WAGzC,qBAAKN,QAAStC,EAAd,8BCpFS6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1D,SAAS2D,eAAe,SAM1BZ,M","file":"static/js/main.671ff936.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/onCountRounded.a23de692.svg\";","import { useEffect, useState } from \"react\";\nimport { axios } from \"axios\";\nimport icon from \"./onCountRounded.svg\";\n\nimport \"./App.css\";\n\nconst saveDocument = ({ link, name = \"\", fileFormat = \"pdf\" }) => {\n  let fileName = name;\n  if (name && fileFormat) {\n    fileName = `${name}.${fileFormat}`;\n  }\n\n  const targetLink = document.createElement(\"a\");\n  targetLink.download = fileName;\n  targetLink.href = link;\n  targetLink.click();\n  targetLink.remove();\n};\n\nconst isSafari = () => {\n  const isAppleVendor = navigator.vendor.indexOf(\"Apple\") > -1;\n  const isCriOS = navigator.userAgent.indexOf(\"CriOS\") === -1;\n  const isFxiOS = navigator.userAgent.indexOf(\"FxiOS\") === -1;\n  return isAppleVendor && isCriOS && isFxiOS;\n};\n\nconst openDocument = (options) => {\n  if (isSafari()) {\n    saveDocument(options);\n  } else {\n    window.open(options.link, \"_blank\");\n  }\n};\n\nfunction usePdf() {\n  const [link, setLink] = useState(\"\");\n  useEffect(() => {\n    console.log(\"useEffect...\");\n\n    const fetchData = async () => {\n      const response = await fetch(\n        encodeURI(\n          \"https://vadimdez.github.io/ng2-pdf-viewer/assets/pdf-test.pdf\"\n        ),\n        {\n          // mode: \"no-cors\",\n        }\n      );\n\n      const buffer = await response.arrayBuffer();\n      console.log(\"buffer.length\", buffer.length);\n      const myBlob = new Blob([buffer], { type: \"application/pdf\" });\n      const objectUrl = URL.createObjectURL(myBlob);\n      setLink(objectUrl);\n    };\n\n    fetchData();\n\n    return () => {\n      URL.revokeObjectURL(link);\n      setLink(\"\");\n    };\n  }, []);\n\n  return {\n    link: isSafari() ? null : link,\n    download: () => {\n      saveDocument({ link, name: \"test-pdf\", fileFormat: \"pdf\" });\n    },\n    preview: () => {\n      openDocument({ link, name: \"test-pdf\", fileFormat: \"pdf\" });\n    },\n  };\n}\n\nfunction App() {\n  const { link, download, preview } = usePdf();\n\n  const showPreview = false && link !== null;\n\n  const style = {\n    width: \"200px\",\n    height: \"200px\",\n  };\n  return (\n    <>\n      <div onClick={preview} style={{ cursor: \"pointer\" }}>\n        {showPreview ? (\n          <object data={link} style={style} type=\"application/pdf\">\n            <param name=\"data\" value={link} />\n            <span>NOT RENDERED...</span>\n          </object>\n        ) : (\n          <img src={icon} className=\"icon\" alt=\"logo\" />\n        )}\n      </div>\n      <div onClick={download}>Download PDF</div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}